-- Users authenticated via Clerk
create table users (
  id uuid primary key default gen_random_uuid(),
  clerk_user_id text unique not null,
  email text not null,
  first_name text,
  last_name text,
  stripe_subscription_id text unique
  created_at timestamp zone default now()
  modified_at timestamp default now()
);

-- Plans available for subscription
create table plans (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  price_cents integer not null,
  credit_limit integer not null,
  billing_interval text check (billing_interval in ('monthly', 'yearly')),
  is_active boolean default true,
  created_at timestamp with time zone default now()
);

-- Subscription records (1 active per user at a time)
create table subscriptions (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references users(id) on delete cascade,
  plan_id uuid references plans(id),
  stripe_subscription_id text unique,
  start_date date not null,
  end_date date not null,
  is_active boolean default true,
  cancel_at_period_end boolean default false,
  created_at timestamp with time zone default now()
);

-- Enforce 1 active sub per user
create unique index one_active_subscription_per_user
on subscriptions(user_id)
where is_active = true;

-- Tracks current usage per billing window
create table credit_usage (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references users(id) on delete cascade,
  subscription_id uuid references subscriptions(id) on delete cascade,
  usage_window_start date not null,
  usage_window_end date not null,
  credits_used integer default 0,
  created_at timestamp with time zone default now()
);

-- Optional: detailed audit log per credit-consuming action
create table credit_usage_log (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references users(id) not null,
  feature_id text not null,
  credits_used integer not null,
  created_at timestamp with time zone default now()
);

-- Optional: price history for plans (e.g. $10 -> $20)
create table plan_history (
  id uuid primary key default gen_random_uuid(),
  plan_id uuid references plans(id) on delete cascade,
  price_cents integer not null,
  updated_at timestamp with time zone default now()
);
