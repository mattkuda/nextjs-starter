NextJS Starter Project Requirements Document (PRD)
Project Overview
NextJS Starter is a SaaS platform designed to simplify communication workflows by leveraging AI to generate thread replies, summarize discussions, craft actionable tasks, and assist in effective messaging. The MVP will provide the core functionality needed to attract individual users and small teams, emphasizing ease of use, customization, and clear upgrade paths.

1. Goals and Objectives
Primary Goals:
Deliver AI-powered tools for generating replies, summarizing threads, and creating actionable content.
Provide an intuitive, feature-rich dashboard to encourage user engagement and convert users to paid plans.
Secondary Goals:
Establish a scalable technical foundation for future enhancements.
Optimize cost-efficient use of LLM API tokens.
2. Target Audience
Primary Users:
Professionals such as developers, project managers, and customer support teams who manage or participate in threaded discussions.
Secondary Users:
Freelancers and small business owners seeking efficient communication tools.

3. KEY FEATURES

**Thread Insights:**
Purpose: Summarize threads and generate concise replies.
Input: User pastes a thread context, question, or description.
Output:
Summaries highlighting key points.
AI-generated replies with options for:
Tone Refinement: Formal, Casual, Humorous (Free); Professional, Empathetic, Witty (Pro).
Variations: 1 or 3 replies (Free); 1, 3, or 5 replies (Pro).
Customization: Reply length and emoji toggles (Pro).

**Thread Starter:**
Purpose: Generate actionable ways to kick off discussions.
Input: A brief description of the context or goal.
Output: 3-5 suggestions, tailored to focus areas like feedback, brainstorming, or Q&A.

**Docs Writer:**
Purpose: Turn threads into clean, professional documentation.
Input: Paste threads or conversations.
Output:
A structured document with sections for:
Overview
Key points
Action items
Toggle options for expanded summaries or task lists (Pro).

**Ticket Creator:**
Purpose: Turn thread summaries or ideas into structured, actionable tickets for your team (think Jira, Linear, etc).
Input: A thread or idea.
Output: A ticket preview with:
Title: Auto-generated or based on input.
Description: AI-generated structured details.
Tags/Labels: Suggested keywords.

**Tone Converter:**
Purpose: Convert text to a specific tone.
Input: Original text, desired tone, language.
Output: 3 variations of the text in the desired tone.

**Social Wizard:**
Purpose: Generate social media posts
Input: Context, tone, soical media platform (linkedin, twitter, etc), use of hashtags or emojis
Output: Variations of the text in the desired tone.

**AI Coach:**
Purpose: Chat with an AI coach on any work-related topic to get feedback and suggestions on clear communication (ChatGPT style geared towards work).
Input: Chat message.
Output:
Reply: AI-generated response, which can be replied to for further iterations.

3.2 Plans and Tiers
Free Plan:
Features:
Access to all seven features.
Limited to 5 credits total.
Customization Options: Basic tone selection and summarization.
Outputs: Up to 3 replies per thread.
Pro Plan:
Cost: $10/month.
Features:
Access to all seven features.
1000 credits per month.
Advanced tone options (10+).
Expanded customization for summaries and replies.
Outputs: Up to 5 replies per thread.
Extra Tools:
Download outputs (e.g., as TXT or JSON).
Export tickets and documentation.
4. Technical Requirements
4.1 Frontend
Framework: Next.js.
Styling: Tailwind CSS with light blue (#A5C8FF) and light orange (#E2D0BE) as primary colors.
UI Components: shadcn/ui for reusable design elements.
Pages:
Landing/Demo Page:
Highlight features.
Allow unsigned users to test Thread Assistant with limited options.
Dashboard (Core MVP Page):
Navigation: Vertical tabs for:
Thread Assistant
Thread Starter
Documentation Writer
Jira Ticket Creator
AI Coach
Tone Converter
Content Area: Dynamic sections for each feature.
Account Page:
Display subscription tier, credits remaining, and renewal date.
Manage subscription (upgrade, cancel, or update payment method).
4.2 Backend
Framework: Serverless functions (e.g., AWS Lambda) or Node.js.
Database: Supabase (PostgreSQL).
User Schema Includes:
credits: Tracks remaining credits.
subscription_end_date: Determines effective subscription status.
subscription_status: Historical record of subscription tier.
Third-Party Services:
LLM Integration: OpenAI for AI functionality.
Payments: Stripe for subscription management.
4.3 API Endpoints
Core Endpoints:
/api/generateReply (POST): Handles Thread Assistant logic.
/api/generateStarter (POST): Generates thread starters.
/api/generateDocs (POST): Creates professional documentation.
/api/generateTicket (POST): Creates structured Jira tickets.
/api/analyzeThread (POST): Provides thread feedback and advice.
/api/generateEmail (POST): Generates email drafts.
/api/convertTone (POST): Converts tone of text.
Account Management Endpoints:
/api/user (GET, PUT): Fetch and update user profiles.
/api/upgradePlan (POST): Direct users to Stripe Checkout for plan upgrades.
/api/cancelSubscription (POST): Handle subscription cancellations.
5. Subscription Management
Service: Stripe.
Plans:
Free: 10 total credits.
Pro: 1000 credits per month.
Features:
Billing management on the Account page.
Real-time usage tracking displayed in the dashboard.
6. User Experience
6.1 Dashboard Flow:
User Journey:
User logs in and lands on the Thread Assistant tab by default.
Navigation:
Vertical tabs on the left for switching features.
Intuitive layout with consistent headers, inputs, and actions.
Content Area:
Dynamically changes based on the selected feature.
Clear buttons for generation, copying, and resetting inputs.
6.2 Mobile Responsiveness:
Collapsible navigation for smaller screens.
Full-width content for feature interaction.
7. Success Metrics
Engagement:
Free-to-Pro conversion rate: 10%.
Average feature usage per user.
Usage:
Credits consumed per user.
Completion rates for generation tasks.
Revenue:
Monthly recurring revenue (MRR) from Pro users.

TODO:
- Social Post Generator