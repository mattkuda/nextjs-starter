"use server"
import { NextResponse } from 'next/server';
import OpenAI from 'openai';
import { zodResponseFormat } from 'openai/helpers/zod';
import { z } from 'zod';
import { auth } from '@clerk/nextjs/server';
import { createClient } from "@supabase/supabase-js";
import { MAX_THREAD_CONTEXT_LENGTH } from '../../../lib/constants';
import { ToneConverterResponse } from '../../../types';

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

const supabase = createClient(
    process.env.SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_KEY!
);

// Define the response schema using Zod
const ResponseSchema = z.object({
    convertedTexts: z.array(z.string().describe("A tone-converted variation of the input text"))
        .describe("A list of tone-converted variations generated by the AI."),
});

export async function POST(req: Request) {
    try {
        // Check authentication
        const { userId } = await auth();

        if (!userId) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }

        // Get user data and check credits
        const { data: user, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('clerk_id', userId)
            .single();

        if (userError || !user) {
            return NextResponse.json({ error: "Failed to fetch user data." }, { status: 400 });
        }

        if (user.credits <= 0) {
            return NextResponse.json({ error: "Insufficient credits. Upgrade your plan to continue." }, { status: 403 });
        }

        // Parse request body
        const { text, tone, language, variations } = await req.json();

        // Validate required inputs
        if (!text) {
            return NextResponse.json({ error: "Input text is required." }, { status: 400 });
        }

        if (text.length > MAX_THREAD_CONTEXT_LENGTH) {
            return NextResponse.json(
                { error: `Input text must not exceed ${MAX_THREAD_CONTEXT_LENGTH} characters.` },
                { status: 400 }
            );
        }

        // Generate the tone-converted variations prompt
        const prompt = `You are an expert communication AI specializing in text transformation. Your task is to convert the input text into ${variations} different variations, each reflecting the specified tone and language.

        The input text is:
        "${text}"

        Parameters:
        - Tone: ${tone} - Ensure the output maintains this tone consistently.
        - Language: ${language} - Translate and adjust the text to this language as needed.
        
        Guidelines:
        1. Ensure readability and fluency in the specified language.
        2. Maintain the original intent and meaning of the text.
        3. Provide ${variations} unique variations in the requested tone.

        Output Format:
        {
          "convertedTexts": [
            "First variation...",
            "Second variation...",
            ...
          ]
        }`;

        const response = await openai.beta.chat.completions.parse({
            model: "gpt-4o-mini",
            messages: [
                {
                    role: "system",
                    content: `
You must output a JSON object strictly following this schema:
{
  "convertedTexts": ["string", ...]
}
Do not include any extraneous text.`,
                },
                {
                    role: "user",
                    content: prompt,
                },
            ],
            response_format: zodResponseFormat(ResponseSchema, "toneConverterResponse"),
        });

        // Deduct credits
        const { error: updateError } = await supabase
            .from('users')
            .update({ credits: user.credits - 1 })
            .eq('clerk_id', userId);

        if (updateError) {
            console.error("Error updating credits:", updateError);
            return NextResponse.json({ error: "Failed to update credits" }, { status: 500 });
        }

        const result = response.choices[0].message.parsed as ToneConverterResponse;
        return NextResponse.json(result);
    } catch (error) {
        console.error("Error converting tone:", error);
        return NextResponse.json(
            // @ts-expect-error - error is not typed
            { error: "Failed to convert tone.", details: error.message },
            { status: 500 }
        );
    }
}

export async function GET() {
    return NextResponse.json({
        message: "Tone Converter API",
        supportedParams: [
            "text (required)",
            "tone",
            "language",
            "variations",
        ],
    });
}
