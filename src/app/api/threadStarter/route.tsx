"use server"
import { NextResponse } from 'next/server';
import OpenAI from 'openai';
import { zodResponseFormat } from 'openai/helpers/zod';
import { z } from 'zod';
import { auth } from '@clerk/nextjs/server';
import { createClient } from "@supabase/supabase-js";
import { MAX_THREAD_CONTEXT_LENGTH } from '../../../lib/constants';
import { ThreadStarterResponse } from '../../../types';
import { formatUserPromptDescription, getReplyLengthInstructions } from '../../../lib/utils';

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

const supabase = createClient(
    process.env.SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_KEY!
);

// Define the response schema using Zod
const ResponseSchema = z.object({
    suggestedStarters: z.array(z.string().describe("An individual AI-generated thread starter"))
        .describe("A list of thread starters generated by the AI."),
});

export async function POST(req: Request) {
    try {
        // Check authentication
        const { userId } = await auth();

        if (!userId) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }

        // Get user data and check credits
        const { data: user, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('clerk_id', userId)
            .single();

        if (userError || !user) {
            return NextResponse.json({ error: "Failed to fetch user data." }, { status: 400 });
        }

        if (user.credits <= 0) {
            return NextResponse.json({ error: "Insufficient credits. Upgrade your plan to continue." }, { status: 403 });
        }

        // Parse request body
        const {
            instructions,
            tone,
            threadType,
            replyLength,
            customSentences,
            variations,
            useEmojis,
        } = await req.json();

        // Validate required inputs
        if (!instructions) {
            return NextResponse.json({ error: "Thread instructions is required." }, { status: 400 });
        }

        if (!instructions || instructions.length > MAX_THREAD_CONTEXT_LENGTH) {
            return NextResponse.json(
                { error: `Thread instructions must not exceed ${MAX_THREAD_CONTEXT_LENGTH} characters.` },
                { status: 400 }
            );
        }

        // Generate the enhanced prompt
        const prompt = `You are an expert communication AI specializing in crafting engaging and effective thread starters for professional discussions. 
        ${formatUserPromptDescription(user)}
        Your task is to generate ${variations} different thread starter messages based on the following parameters:
        
        The user instructions for the thread to start are:
        ${instructions}
        
        Parameters:
        - Thread Type: ${threadType} - Ensure the message follows best practices for ${threadType} threads
        - Tone: ${tone} - Maintain this tone throughout the message
        - Thread Length: ${getReplyLengthInstructions(replyLength, customSentences)}

        ${useEmojis ? '- Use relevant emojis to enhance the message (max 2-3 emojis)' : '- Do not use any emojis'}
        
        Guidelines:
        1. Start strong and be clear about the purpose
        2. Use professional but engaging language
        3. Include a clear call-to-action or question when appropriate
        4. Structure the message for easy readability
        5. Maintain consistent tone throughout
        6. Focus on driving engagement and discussion
        
        Generate ${variations} unique variations that achieve the communication goal while following these parameters.
        
        Output Format:
        {
          "suggestedStarters": [
            "First variation...",
            "Second variation...",
            ...
          ]
        }`;

        const response = await openai.beta.chat.completions.parse({
            model: "gpt-4o-mini",
            messages: [
                {
                    role: "system",
                    content: `
You must output a JSON object strictly following this schema:
{
  "suggestedStarters": ["string", ...]
}
Do not include any extraneous text.`,
                },
                {
                    role: "user",
                    content: prompt,
                },
            ],
            response_format: zodResponseFormat(ResponseSchema, "threadResponse"),
        });

        // Deduct credits
        const { error: updateError } = await supabase
            .from('users')
            .update({ credits: user.credits - 1 })
            .eq('clerk_id', userId);

        if (updateError) {
            console.error("Error updating credits:", updateError);
            return NextResponse.json({ error: "Failed to update credits" }, { status: 500 });
        }

        const result = response.choices[0].message.parsed as ThreadStarterResponse;
        return NextResponse.json(result);
    } catch (error) {
        console.error("Error generating thread starters:", error);
        return NextResponse.json(
            // @ts-expect-error asdf
            { error: "Failed to generate thread starters.", details: error.message },
            { status: 500 }
        );
    }
}

export async function GET() {
    return NextResponse.json({
        message: "FlowThread Thread Insights API",
        supportedParams: [
            "threadContext (required)",
            "instructions (optional)",
            "tone",
            "replyLength",
            "customSentences (optional)",
            "variations",
            "useEmojis",
        ],
    });
}
