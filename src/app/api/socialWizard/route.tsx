"use server"
import { NextResponse } from 'next/server';
import OpenAI from 'openai';
import { zodResponseFormat } from 'openai/helpers/zod';
import { z } from 'zod';
import { auth } from '@clerk/nextjs/server';
import { createClient } from "@supabase/supabase-js";
import { MAX_THREAD_CONTEXT_LENGTH } from '../../../lib/constants';
import { formatUserPromptDescription, getReplyLengthInstructions } from '../../../lib/utils';

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

const supabase = createClient(
    process.env.SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_KEY!
);

// Define the response schema using Zod
const ResponseSchema = z.object({
    suggestedPosts: z.array(z.string().describe("An individual AI-generated social media post"))
        .describe("A list of posts generated by the AI."),
});

export async function POST(req: Request) {
    try {
        // Check authentication
        const { userId } = await auth();

        if (!userId) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }

        // Get user data and check credits
        const { data: user, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('clerk_id', userId)
            .single();

        if (userError || !user) {
            return NextResponse.json({ error: "Failed to fetch user data." }, { status: 400 });
        }

        if (user.credits <= 0) {
            return NextResponse.json({ error: "Insufficient credits. Upgrade your plan to continue." }, { status: 403 });
        }

        // Parse request body
        const {
            instructions,
            platform,
            tone,
            variationLength,
            customSentences,
            variations,
            useEmojis,
            useHashtags,
        } = await req.json();

        console.log(instructions, platform, tone, variationLength, customSentences, variations, useEmojis, useHashtags);

        // Validate required inputs
        if (!instructions) {
            return NextResponse.json({ error: "Post instructions are required." }, { status: 400 });
        }

        if (!instructions || instructions.length > MAX_THREAD_CONTEXT_LENGTH) {
            return NextResponse.json(
                { error: `Post instructions must not exceed ${MAX_THREAD_CONTEXT_LENGTH} characters.` },
                { status: 400 }
            );
        }

        // Generate the enhanced prompt
        const prompt = `You are an expert social media manager specializing in creating engaging and effective posts. 
        ${formatUserPromptDescription(user)}
        Your task is to generate ${variations} different social media posts based on the following parameters:
        
        The user's post description:
        ${instructions}
        
        Parameters:
        - Platform: ${platform}
        - Tone: ${tone} - Maintain this tone throughout the post
        - Strict Rules on Post Length: ${getReplyLengthInstructions(variationLength, customSentences)}
        
        Style Guidelines:
        ${useEmojis ? '- Use relevant emojis strategically (2-3 max per post)' : '- Do not use any emojis'}
        ${useHashtags ? `- Include 3-5 relevant hashtags for ${platform}` : '- Do not include hashtags'}
        - Follow ${platform}'s best practices for formatting and length
        - Create engaging, shareable content
        - Include a call-to-action when appropriate
        - Maintain consistent brand voice
        
        Platform-Specific Considerations:
        ${getPlatformGuidelines(platform)}
        
        Generate ${variations} unique variations that will maximize engagement while following these parameters.
        
        Output Format:
        {
          "suggestedPosts": [
            "First post...",
            "Second post...",
            ...
          ]
        }`;

        console.log(prompt);

        const response = await openai.beta.chat.completions.parse({
            model: "gpt-4o-mini",
            messages: [
                {
                    role: "system",
                    content: `
                        You must output a JSON object strictly following this schema:
                        {
                        "suggestedPosts": ["string", ...]
                        }
                        Do not include any extraneous text.`,
                },
                {
                    role: "user",
                    content: prompt,
                },
            ],
            response_format: zodResponseFormat(ResponseSchema, "postResponse"),
        });

        // Deduct credits
        const { error: updateError } = await supabase
            .from('users')
            .update({ credits: user.credits - 1 })
            .eq('clerk_id', userId);

        if (updateError) {
            console.error("Error updating credits:", updateError);
            return NextResponse.json({ error: "Failed to update credits" }, { status: 500 });
        }

        return NextResponse.json(response.choices[0].message.parsed);
    } catch (error) {
        console.error("Error generating posts:", error);
        return NextResponse.json(
            // @ts-expect-error asdf
            { error: "Failed to generate posts.", details: error.message },
            { status: 500 }
        );
    }
}

function getPlatformGuidelines(platform: string): string {
    const guidelines = {
        instagram: "- Focus on visual storytelling\n- Use line breaks for readability\n- Include relevant hashtags naturally",
        twitter: "- Be concise and impactful\n- Use thread format for longer content\n- Use two new lines after each sentence or two where applicable for readability\n- Start each post with a hook",
        linkedin: "- Professional tone\n- Include industry insights\n- Use paragraph breaks\n- Focus on value proposition\n- Start each post with a hook\n- Use two new lines after each paragraph where applicable for readability",
        tiktok: "- Casual, authentic tone\n- Use trending hashtags\n- Short, punchy text\n- Call-to-action focused",
        facebook: "- Conversational tone\n- Question-based engagement\n- Focus on community building\n- Start each post with a hook",
        pinterest: "- Descriptive, keyword-rich\n- Clear value proposition\n- Action-oriented\n- SEO-friendly description"
    };

    return guidelines[platform as keyof typeof guidelines] || "";
}

export async function GET() {
    return NextResponse.json({
        message: "NextJS Starter Post Generator API",
        supportedParams: [
            "instructions (required)",
            "platform",
            "tone",
            "replyLength",
            "customSentences",
            "variations",
            "useEmojis",
            "useHashtags"
        ],
    });
} 